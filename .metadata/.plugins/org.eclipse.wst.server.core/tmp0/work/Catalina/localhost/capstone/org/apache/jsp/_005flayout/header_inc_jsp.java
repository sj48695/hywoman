/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2019-02-21 13:22:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._005flayout;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class header_inc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	request.setCharacterEncoding("utf-8");
	String pageTitle = request.getParameter("title");

      out.write("\r\n");
      out.write("<!doctype html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("\t<!-- Required meta tags -->\r\n");
      out.write("\t<meta charset=\"utf-8\">\r\n");
      out.write("\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\r\n");
      out.write("\t<!-- Bootstrap CSS -->\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"/capstone/assets/bootstrap-4.1.3/css/bootstrap.min.css\">\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css\">\r\n");
      out.write("\t<!-- <link rel=\"stylesheet\" href=\"/capstone/assets/fontawesome-free-5.5.0/css/all.css\"> -->\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.0.10/css/all.css\" >\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"https://www.w3schools.com/lib/w3-theme-black.css\"> \r\n");
      out.write("\t\r\n");
      out.write("\t<!-- include summernote css/js-->\r\n");
      out.write("\t<link href=\"http://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.8/summernote.css\" rel=\"stylesheet\">\r\n");
      out.write("\t\r\n");
      out.write("\t<!--  style  -->\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"/capstone/signD/etc/style.css\" type=\"text/css\">\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"/capstone/signD/etc/main.css\" />\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"/capstone/signD/etc/style1.css\" /> \r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"/capstone/signD/etc/mypage.css\" type=\"text/css\">\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"/capstone/signD/etc/contest.css\" />\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"/capstone/signD/etc/member.css\" />\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"/capstone/signD/etc/designer.css\" />\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"/capstone/signD/etc/help.css\" />\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"/capstone/signD/etc/manager.css\" />\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css\">\r\n");
      out.write("\t<script src=\"//code.jquery.com/jquery.min.js\"></script>\r\n");
      out.write("\t<script>\r\n");
      out.write("    $(document).ready(function() {\r\n");
      out.write("\t   if( $('body').on('change')){\r\n");
      out.write("\t    \t$(\".tooltip-inner\").attr(\"style\",\"max-width:300px\");\r\n");
      out.write("\t   }\r\n");
      out.write("\t\t$('[data-toggle=\"tooltip\"]').tooltip({\r\n");
      out.write("\t\t\tdelay: { \"show\": 0, \"hide\": 1000*3 }\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t$('.tooltip-bottom').tooltip({\r\n");
      out.write("\t\t\tplacement: 'bottom',\r\n");
      out.write("\t\t\tviewport: {selector: 'body', padding: 2}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t$('.tooltip-viewport-bottom').tooltip({\r\n");
      out.write("\t\t\tplacement: 'bottom',\r\n");
      out.write("\t\t\tviewport: {selector: '.container-viewport', padding: 2}\r\n");
      out.write("\t\t});\r\n");
      out.write("   });\r\n");
      out.write("</script>\r\n");
      out.write("\t<link href=\"https://fonts.googleapis.com/css?family=Nanum+Gothic\" rel=\"stylesheet\">\r\n");
      out.write("\t<title>");
      out.print(pageTitle);
      out.write("</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
