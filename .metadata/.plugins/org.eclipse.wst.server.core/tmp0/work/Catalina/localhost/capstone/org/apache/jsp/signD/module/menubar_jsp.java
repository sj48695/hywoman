/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2019-02-21 13:22:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.signD.module;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import signD.member.AlarmDataBean;
import signD.member.AlarmDBBean;
import signD.member.LogonDBBean;

public final class menubar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("signD.member.AlarmDataBean");
    _jspx_imports_classes.add("signD.member.AlarmDBBean");
    _jspx_imports_classes.add("signD.member.LogonDBBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("utf-8");
	String id = (String) session.getAttribute("id");
	String managerId = (String) session.getAttribute("managerId");

	LogonDBBean member = LogonDBBean.getInstance();
	String name = "";
	
	AlarmDBBean alarmdb=AlarmDBBean.getInstance();
	int alarmcount=alarmdb.getUnReadAlarmCount(id);
	List<AlarmDataBean> alarmList=null;
	AlarmDataBean alarm=null;

      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("$(function(){\r\n");
      out.write("  $(\".zeta-menu li\").hover(function(){\r\n");
      out.write("    $('ul:first',this).show();\r\n");
      out.write("  }, function(){\r\n");
      out.write("    $('ul:first',this).hide();\r\n");
      out.write("  });\r\n");
      out.write("  $(\".zeta-menu>li:has(ul)>a\").each( function() {\r\n");
      out.write("    /* $(this).html( $(this).html()+' &or;' ); */\r\n");
      out.write("  });\r\n");
      out.write("  $(\".zeta-menu ul li:has(ul)\").find(\"a:first\")\r\n");
      out.write("/*     .append(\"<p style='float:right;margin:-3px'></p>\"); */\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("$(window).scroll(function() {    \r\n");
      out.write("    var scroll = $(window).scrollTop();\r\n");
      out.write("     //console.log(scroll);\r\n");
      out.write("    if (scroll >= 400) {//스크롤 내려가면\r\n");
      out.write("        //console.log('a');\r\n");
      out.write("        $(\".main-menu-bar\").addClass(\"change-menubar\");\r\n");
      out.write("        $(\".main-menu-bar a\").css('color','#495161');\r\n");
      out.write("        $(\".main-menu-bar img\").attr('src','/capstone/signD/module/do.png'); \r\n");
      out.write("    } else {//스크롤 올라가면\r\n");
      out.write("        //console.log('a');\r\n");
      out.write("        $(\".main-menu-bar\").removeClass(\"change-menubar\");\r\n");
      out.write("        $(\".main-menu-bar a\").css('color','');\r\n");
      out.write("        $(\".main-menu-bar img\").attr('src','/capstone/signD/module/do_white.png'); \r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<nav class=\"navbar navbar-expand-lg navbar-dark main-menu-bar\" id=\"fixed-menu\">\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t  <a class=\"navbar-brand\" href=\"/capstone/signD/main.jsp\">\r\n");
      out.write("\t  \r\n");
      out.write("\t  \t<img src=\"/capstone/signD/module/do_white.png\" style=\"width:70px;\"> \r\n");
      out.write("\t  </a>\r\n");
      out.write("\t  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n");
      out.write("\t    <span class=\"navbar-toggler-icon\"></span>\r\n");
      out.write("\t  </button>\r\n");
      out.write("\t  <div class=\"collapse navbar-collapse\" id=\"navbarText\">\r\n");
      out.write("\t\t<ul class=\"navbar-nav mr-auto zeta-menu\">\r\n");
      out.write("\t\t\t<li>\r\n");
      out.write("\t\t\t");

				if(id != null) {
			
      out.write("  <a href=\"/capstone/signD/contest/designRequest1.jsp\">디자인 의뢰</a>\r\n");
      out.write("\t\t\t\t<ul>\r\n");
      out.write("\t\t\t\t\t<li><a href=\"/capstone/signD/contest/designRequest1.jsp\">공모전 개최하기</a></li>\r\n");
      out.write("\t\t\t\t</ul>\r\n");
      out.write("\t\t\t");
	
				}else{
			
      out.write("  <a data-toggle=\"modal\" href=\"#\" data-target=\"#member\">디자인 의뢰</a>\r\n");
      out.write("\t\t\t\t<ul>\r\n");
      out.write("\t\t\t\t\t<li><a data-toggle=\"modal\" href=\"#\" data-target=\"#member\">공모전 개최하기</a></li>\r\n");
      out.write("\t\t\t\t</ul>\r\n");
      out.write("\t\t\t");
 
				}
			
      out.write("\r\n");
      out.write("\t\t\t</li>\r\n");
      out.write("\t\t\t<li><a href=\"/capstone/signD/contest/contestList.jsp\">공모전 리스트</a>\r\n");
      out.write("\t\t\t\t<ul>\r\n");
      out.write("\t\t\t\t\t<li><a href=\"/capstone/signD/contest/contestList.jsp\">진행중인 공모전</a></li>\r\n");
      out.write("\t\t\t\t\t<li><a href=\"/capstone/signD/contest/contestEndList.jsp\">종료된 공모전</a></li>\r\n");
      out.write("\t\t\t\t</ul>\r\n");
      out.write("\t\t\t</li>\r\n");
      out.write("\t\t\t<li><a href=\"/capstone/signD/designer/designerList.jsp\">디자이너</a>\r\n");
      out.write("\t\t\t\t<ul>\r\n");
      out.write("\t\t\t\t\t<li><a href=\"/capstone/signD/designer/designerList.jsp\">디자이너 리스트</a></li>\r\n");
      out.write("\t\t\t\t\t<li><a href=\"/capstone/signD/designer/winningwork.jsp\">포트폴리오</a>\r\n");
      out.write("\t\t\t\t\t\t<ul>\r\n");
      out.write("\t\t\t\t\t\t\t<li><a href=\"/capstone/signD/designer/winningwork.jsp\">콘테스트 우승작</a></li>\r\n");
      out.write("\t\t\t\t\t\t\t<li><a href=\"/capstone/signD/designer/designerportfolio.jsp\">디자이너 포트폴리오</a></li>\r\n");
      out.write("\t\t\t\t\t\t</ul>\r\n");
      out.write("\t\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t</ul>\r\n");
      out.write("\t\t\t</li>\r\n");
      out.write("\t\t\t<li><a href=\"/capstone/signD/help/notice.jsp\">고객센터</a>\r\n");
      out.write("\t\t\t\t<ul>\r\n");
      out.write("\t\t\t\t\t<li><a href=\"/capstone/signD/help/notice.jsp\">공지사항</a></li>\r\n");
      out.write("\t\t\t\t\t<li><a href=\"/capstone/signD/help/FAQ.jsp\">FAQ</a></li>\r\n");
      out.write("\t\t\t\t\t<li><a href=\"/capstone/signD/help/Q&A.jsp\">Q&A</a></li>\r\n");
      out.write("\t\t\t\t\t<li><a href=\"/capstone/signD/help/rule.jsp\">이용방법</a></li>\r\n");
      out.write("\t\t\t\t</ul>\r\n");
      out.write("\t\t\t</li>\r\n");
      out.write("\t    </ul>\r\n");
      out.write("\t    <ul class=\"navbar-nav zeta-menu\">\r\n");
      out.write("\t\t");

			if (id == null || id.equals("")) {
				if (managerId == null || managerId.equals("")) {
		
      out.write("\r\n");
      out.write("\t\t\t<li><a data-toggle=\"modal\" href=\"#\" data-target=\"#member\">로그인</a></li>\r\n");
      out.write("\t\t\t<li><a href=\"/capstone/signD/member/insertMember1.jsp\">회원가입</a></li>\r\n");
      out.write("\t\t\t");

				} else {
						name = member.selectName(managerId);
			
      out.write("\r\n");
      out.write("\t\t\t<li>\r\n");
      out.write("\t\t\t\t<a href=\"/capstone/signD/main.jsp\">");
      out.print(name);
      out.write('(');
      out.print(managerId);
      out.write(")님</a>\r\n");
      out.write("\t\t\t\t<ul>\r\n");
      out.write("\t\t\t\t\t<li><a href=\"/capstone/signD/manager/memberManagementForm.jsp\">회원관리</a></li>\r\n");
      out.write("\t\t\t\t\t<li><a href=\"/capstone/signD/manager/prize_moneyDeliveryForm.jsp\">상금전달</a></li>\r\n");
      out.write("\t\t\t\t\t<li><a href=\"/capstone/signD/member/logout.jsp\">로그아웃</a></li>\r\n");
      out.write("\t\t\t\t</ul>\r\n");
      out.write("\t\t\t</li>\r\n");
      out.write("\t\t");

				}
			} else {
				name = member.selectName(id);
		
      out.write("\r\n");
      out.write("\t\t\t<li>\r\n");
      out.write("\t\t\t\t<a href=\"#\">");
      out.print(name);
      out.write('(');
      out.print(id);
      out.write(")님</a>\r\n");
      out.write("\t\t\t\t<ul>\r\n");
      out.write("\t\t\t\t\t<li><a href=\"/capstone/signD/mypage/myPage.jsp?pageNum=1\">마이페이지</a></li>\r\n");
      out.write("\t\t\t\t\t<li><a href=\"/capstone/signD/member/logout.jsp\">로그아웃</a></li>\r\n");
      out.write("\t\t\t\t</ul>\r\n");
      out.write("\t\t\t</li>\r\n");
      out.write("\t\t\t<li>\r\n");
      out.write("\t\t\t\t<div class=\"offset-6\">\r\n");
      out.write("\t\t\t\t\t");
if (alarmcount != 0) {
      out.write("<span class=\"badge badge-pill badge-danger mt-2\" \r\n");
      out.write("\t\t\t\t\t\tstyle=\"padding-top: 4px;padding-bottom: 4px;position: absolute;\">");
      out.print(alarmcount );
      out.write("</span>\r\n");
      out.write("\t\t\t\t\t\t");
} 
      out.write("\r\n");
      out.write("            \t</div>\r\n");
      out.write("            \t<a class=\"nav-link menu_link\" data-toggle=\"tooltip\" data-html = \"true\"\r\n");
      out.write("\t\t\t\t\tdata-placement=\"bottom\"\r\n");
      out.write("\t\t\t\t\ttitle='");
if (alarmcount == 0) {
      out.write("새로운 알람이 없습니다.\r\n");
      out.write("\t            \t\t");
} else {
							alarmList = alarmdb.getUnAlarm(id, 1, 5);
							for (int i = 0; i < alarmList.size(); i++) {
								alarm = alarmList.get(i);
								
      out.write("<a href=\"");
      out.print(alarm.getUrl());
      out.write("\" class=\"p-2\"\r\n");
      out.write("\t\t\t\t\t\t\t\tstyle=\"overflow: hidden;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t    height: 28px;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t    display: -webkit-box;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t    -webkit-line-clamp: 1;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t    -webkit-box-orient: vertical;\"\r\n");
      out.write("\t\t\t\t\t\t\t\t>");
      out.print(alarm.getContents() );
      out.write("</a><hr class=\"my-1\">");
 
							}if(alarmList.size()>=5){
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t<a class=\"p-2\" href=\"/capstone/signD/mypage/myPage.jsp?tab=alarm\">더보기</a>\r\n");
      out.write("\t\t\t\t\t\t\t");
} 
						}
      out.write("'> <i class=\"fas fa-bell\"></i>\r\n");
      out.write("\t\t\t\t</a>\r\n");
      out.write("\t\t\t</li>\r\n");
      out.write("\t\t");

			}
		
      out.write("\r\n");
      out.write("\t\t</ul>\r\n");
      out.write("\t  </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</nav>\r\n");

	if (id == null) {

      out.write("\r\n");
      out.write("<div class=\"modal fade\" id=\"member\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\r\n");
      out.write("\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../member/loginForm.jsp", out, false);
      out.write("\r\n");
      out.write("</div>\r\n");

	}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
